{"ast":null,"code":"var _jsxFileName = \"/Users/andredealbuquerque/Projects/personal-website/build-cv/src/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport styled from \"styled-components\";\nimport { prisma } from \"../utils/prismaClient\";\nimport base from \"axios\";\nimport Form from \"../components/Form\";\nconst axios = base.create({\n  baseURL: \"http://localhost:3000/api\"\n});\nconst DynamicComponentWithNoSSR = dynamic(() => import(\"../components/PdfView\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/PdfView\")],\n    modules: [\"../components/PdfView\"]\n  }\n});\nconst App = styled.div.withConfig({\n  displayName: \"pages__App\",\n  componentId: \"sc-1kdlu6i-0\"\n})([\".pdf{display:flex;justify-content:space-between;}iframe{width:50vw;height:100vh;}\"]);\n\nconst Index = props => {\n  console.log(\"props:\", props);\n  const {\n    0: experiences,\n    1: setExperiences\n  } = useState(props.experiences);\n\n  function edit() {}\n\n  function updateExperiences(newExperience) {\n    setExperiences(experiences.map(el => el.id === newExperience.id ? _objectSpread({}, newExperience) : _objectSpread({}, el)));\n  }\n\n  async function handleSubmit(e) {//  e.preventDefault();\n    //  try {\n    //    const newForm = Object.entries(form).reduce((acc, val) => {\n    //      if (!val[1]) {\n    //        return acc;\n    //      }\n    //      return { ...acc, [val[0]]: val[1] };\n    //    }, {});\n    //    const { data } = await axios.post(\"create\", newForm);\n    //    console.log(\"data:\", data);\n    //  } catch (error) {\n    //    console.log(\"error:\", error);\n    //  }\n  }\n\n  return __jsx(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Hello\"), __jsx(\"div\", {\n    className: \"pdf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, experiences.map(el => __jsx(Form, {\n    key: el.id,\n    experience: el,\n    updateExperiences: updateExperiences,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })), __jsx(DynamicComponentWithNoSSR, {\n    experiences: experiences,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Index;\nexport async function getStaticProps() {\n  const experiences = await prisma.experience.findMany({});\n  return {\n    props: {\n      experiences\n    }\n  };\n}","map":{"version":3,"sources":["/Users/andredealbuquerque/Projects/personal-website/build-cv/src/pages/index.js"],"names":["React","useState","dynamic","styled","prisma","base","Form","axios","create","baseURL","DynamicComponentWithNoSSR","ssr","App","div","Index","props","console","log","experiences","setExperiences","edit","updateExperiences","newExperience","map","el","id","handleSubmit","e","getStaticProps","experience","findMany"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,MAAMC,KAAK,GAAGF,IAAI,CAACG,MAAL,CAAY;AACxBC,EAAAA,OAAO,EAAE;AADe,CAAZ,CAAd;AAIA,MAAMC,yBAAyB,GAAGR,OAAO,CACvC,MAAM,OAAO,uBAAP,CADiC,EAEvC;AAAES,EAAAA,GAAG,EAAE,KAAP;AAAA;AAAA,wCADa,uBACb;AAAA,cADa,uBACb;AAAA;AAAA,CAFuC,CAAzC;AAKA,MAAMC,GAAG,GAAGT,MAAM,CAACU,GAAV;AAAA;AAAA;AAAA,yFAAT;;AAWA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AAEA,QAAM;AAAA,OAACG,WAAD;AAAA,OAAcC;AAAd,MAAgClB,QAAQ,CAACc,KAAK,CAACG,WAAP,CAA9C;;AAEA,WAASE,IAAT,GAAgB,CAAE;;AAElB,WAASC,iBAAT,CAA2BC,aAA3B,EAA0C;AACxCH,IAAAA,cAAc,CACZD,WAAW,CAACK,GAAZ,CAAiBC,EAAD,IACdA,EAAE,CAACC,EAAH,KAAUH,aAAa,CAACG,EAAxB,qBAAkCH,aAAlC,sBAAyDE,EAAzD,CADF,CADY,CAAd;AAKD;;AAED,iBAAeE,YAAf,CAA4BC,CAA5B,EAA+B,CAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,SACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,WAAW,CAACK,GAAZ,CAAiBC,EAAD,IACf,MAAC,IAAD;AACE,IAAA,GAAG,EAAEA,EAAE,CAACC,EADV;AAEE,IAAA,UAAU,EAAED,EAFd;AAGE,IAAA,iBAAiB,EAAEH,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,EAQE,MAAC,yBAAD;AAA2B,IAAA,WAAW,EAAEH,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAFF,CADF;AAeD,CA7CD;;AA+CA,eAAeJ,KAAf;AAEA,OAAO,eAAec,cAAf,GAAgC;AACrC,QAAMV,WAAW,GAAG,MAAMd,MAAM,CAACyB,UAAP,CAAkBC,QAAlB,CAA2B,EAA3B,CAA1B;AAEA,SAAO;AAAEf,IAAAA,KAAK,EAAE;AAAEG,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import React, { useState } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport styled from \"styled-components\";\nimport { prisma } from \"../utils/prismaClient\";\nimport base from \"axios\";\nimport Form from \"../components/Form\";\nconst axios = base.create({\n  baseURL: \"http://localhost:3000/api\",\n});\n\nconst DynamicComponentWithNoSSR = dynamic(\n  () => import(\"../components/PdfView\"),\n  { ssr: false }\n);\n\nconst App = styled.div`\n  .pdf {\n    display: flex;\n    justify-content: space-between;\n  }\n  iframe {\n    width: 50vw;\n    height: 100vh;\n  }\n`;\n\nconst Index = (props) => {\n  console.log(\"props:\", props);\n\n  const [experiences, setExperiences] = useState(props.experiences);\n\n  function edit() {}\n\n  function updateExperiences(newExperience) {\n    setExperiences(\n      experiences.map((el) =>\n        el.id === newExperience.id ? { ...newExperience } : { ...el }\n      )\n    );\n  }\n\n  async function handleSubmit(e) {\n    //  e.preventDefault();\n    //  try {\n    //    const newForm = Object.entries(form).reduce((acc, val) => {\n    //      if (!val[1]) {\n    //        return acc;\n    //      }\n    //      return { ...acc, [val[0]]: val[1] };\n    //    }, {});\n    //    const { data } = await axios.post(\"create\", newForm);\n    //    console.log(\"data:\", data);\n    //  } catch (error) {\n    //    console.log(\"error:\", error);\n    //  }\n  }\n  return (\n    <App>\n      <h1>Hello</h1>\n      <div className=\"pdf\">\n        {experiences.map((el) => (\n          <Form\n            key={el.id}\n            experience={el}\n            updateExperiences={updateExperiences}\n          />\n        ))}\n        <DynamicComponentWithNoSSR experiences={experiences} />\n      </div>\n    </App>\n  );\n};\n\nexport default Index;\n\nexport async function getStaticProps() {\n  const experiences = await prisma.experience.findMany({});\n\n  return { props: { experiences } };\n}\n"]},"metadata":{},"sourceType":"module"}